// ./brssl ta server.crt
static const unsigned char SERVER_TA0_DN[] = {
	0x30, 0x81, 0x88, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06,
	0x13, 0x02, 0x63, 0x6E, 0x31, 0x10, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x04,
	0x08, 0x0C, 0x07, 0x62, 0x65, 0x69, 0x6A, 0x69, 0x6E, 0x67, 0x31, 0x10,
	0x30, 0x0E, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0C, 0x07, 0x68, 0x61, 0x69,
	0x64, 0x69, 0x61, 0x6E, 0x31, 0x0C, 0x30, 0x0A, 0x06, 0x03, 0x55, 0x04,
	0x0A, 0x0C, 0x03, 0x46, 0x42, 0x43, 0x31, 0x0D, 0x30, 0x0B, 0x06, 0x03,
	0x55, 0x04, 0x0B, 0x0C, 0x04, 0x74, 0x65, 0x73, 0x74, 0x31, 0x13, 0x30,
	0x11, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x0A, 0x31, 0x30, 0x2E, 0x34,
	0x2E, 0x39, 0x36, 0x2E, 0x33, 0x33, 0x31, 0x23, 0x30, 0x21, 0x06, 0x09,
	0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x01, 0x16, 0x14, 0x66,
	0x65, 0x6E, 0x67, 0x62, 0x69, 0x6E, 0x67, 0x63, 0x68, 0x75, 0x6E, 0x40,
	0x31, 0x36, 0x33, 0x2E, 0x63, 0x6F, 0x6D
};

static const unsigned char SERVER_TA0_RSA_N[] = {
	0xAF, 0xD6, 0xEB, 0xDA, 0x88, 0xD1, 0x85, 0xEE, 0x8A, 0x9F, 0xDB, 0x70,
	0x40, 0xE1, 0xAA, 0x02, 0x1D, 0x0D, 0xB0, 0x50, 0x73, 0x9A, 0x01, 0x05,
	0xDC, 0x62, 0x53, 0x02, 0x33, 0xEB, 0x5D, 0x54, 0x5C, 0x25, 0x59, 0x97,
	0x62, 0xCA, 0xFF, 0xDC, 0xDE, 0x5E, 0x42, 0x65, 0x21, 0xAC, 0x87, 0x4B,
	0x8E, 0xEA, 0x16, 0x00, 0xCE, 0x1A, 0xDC, 0xBC, 0x0A, 0x9B, 0x79, 0x63,
	0xC0, 0x8D, 0x4D, 0xC0, 0xBB, 0x05, 0xEC, 0xBA, 0x10, 0xC0, 0x6B, 0x5D,
	0x5F, 0xF3, 0x2C, 0x8A, 0xC3, 0x59, 0xAE, 0x77, 0x13, 0xE1, 0xDD, 0xC6,
	0xA1, 0x07, 0x9E, 0xFD, 0x0A, 0x22, 0x6C, 0x10, 0xED, 0x28, 0x57, 0x78,
	0x14, 0xB8, 0xD2, 0x6B, 0x24, 0x84, 0xC5, 0x2C, 0x12, 0x70, 0x72, 0x55,
	0x97, 0x6D, 0xED, 0x3D, 0x80, 0x2B, 0xD8, 0x9C, 0x73, 0x43, 0x7D, 0xB8,
	0xC7, 0xBC, 0x70, 0x1D, 0x72, 0xD3, 0x3F, 0x58, 0xDA, 0x5D, 0x85, 0x5D,
	0x84, 0x94, 0x1A, 0x79, 0xF1, 0xE0, 0x5E, 0x5F, 0x76, 0x03, 0x86, 0x1F,
	0xB5, 0x01, 0xD0, 0xA6, 0xB4, 0x27, 0x3F, 0x4E, 0x3E, 0x47, 0x84, 0x61,
	0x89, 0xE8, 0x3F, 0xB6, 0x4E, 0x70, 0xCB, 0x4A, 0x88, 0xEE, 0x9F, 0x62,
	0x4C, 0x20, 0x28, 0x6C, 0x41, 0xAA, 0x30, 0x5F, 0xDD, 0x01, 0x06, 0x85,
	0x21, 0x70, 0x40, 0xFB, 0x58, 0x61, 0x15, 0x5E, 0x25, 0x87, 0xE3, 0xF4,
	0xA1, 0xE3, 0xFB, 0x28, 0x0C, 0x7C, 0x9E, 0xD5, 0x0A, 0x99, 0xBF, 0xDA,
	0xB0, 0x32, 0x09, 0xCD, 0x15, 0xAA, 0xE3, 0x9D, 0x16, 0x0F, 0x33, 0xA4,
	0xE0, 0xB0, 0xC8, 0xAB, 0xA5, 0xF1, 0xBD, 0xA0, 0x41, 0x84, 0xCA, 0x87,
	0x91, 0x07, 0x73, 0x86, 0x99, 0xAA, 0x88, 0xAB, 0x48, 0x4C, 0x2E, 0xB7,
	0xEE, 0x38, 0x82, 0x08, 0xCE, 0x42, 0xD5, 0x61, 0x64, 0xB9, 0xC8, 0xF5,
	0x9D, 0x05, 0x97, 0xC8, 0xD3, 0x51, 0x30, 0xE2, 0xC0, 0x1E, 0x0E, 0x9F,
	0x72, 0x65, 0x9C, 0xCE, 0xC1, 0x4A, 0x12, 0x7F, 0xEC, 0xEF, 0x51, 0x97,
	0x17, 0x6A, 0x3A, 0x4C, 0x65, 0x7D, 0x3B, 0xDD, 0xF4, 0x71, 0xFA, 0x1C,
	0x97, 0x69, 0xD5, 0x12, 0x62, 0xFD, 0x5A, 0x98, 0x81, 0x60, 0xF3, 0xA4,
	0x7F, 0x1F, 0x8F, 0x7D, 0xC4, 0x27, 0x5F, 0xFD, 0xBC, 0x31, 0xF8, 0xA7,
	0x94, 0x85, 0x49, 0xDB, 0x26, 0x1F, 0x8B, 0xB2, 0x6F, 0x83, 0xF7, 0x85,
	0xEE, 0xED, 0xA0, 0xD2, 0xD8, 0x83, 0x67, 0x01, 0xD1, 0xA7, 0x7A, 0xAE,
	0xEF, 0xD3, 0xD8, 0x15, 0xCF, 0x60, 0x0C, 0x23, 0xB9, 0xD1, 0xFB, 0xA2,
	0x7C, 0xD1, 0x29, 0x27, 0x9A, 0xDD, 0xE2, 0xA4, 0xFE, 0x37, 0xE9, 0x22,
	0x59, 0x4F, 0x4D, 0xBA, 0x02, 0x3F, 0x6A, 0x48, 0xC5, 0x4E, 0x73, 0xF8,
	0x2A, 0x7D, 0xB4, 0xFF, 0x7D, 0x2B, 0xE0, 0xB1, 0xD3, 0xE6, 0x09, 0xA1
};

static const unsigned char SERVER_TA0_RSA_E[] = {
	0x01, 0x00, 0x01
};

#ifndef _MSC_VER
static const br_x509_trust_anchor SERVER_TAs[1] = {
#else
static br_x509_trust_anchor SERVER_TAs[1] = {
#endif
	{
		{ (unsigned char *)SERVER_TA0_DN, sizeof SERVER_TA0_DN },
		0,
		{
			BR_KEYTYPE_RSA,
#ifndef _MSC_VER
			{ .rsa = {
				(unsigned char *)SERVER_TA0_RSA_N, sizeof SERVER_TA0_RSA_N,
				(unsigned char *)SERVER_TA0_RSA_E, sizeof SERVER_TA0_RSA_E,
			} }
#endif
		}
	}
};

#define SERVER_TAs_NUM   1

// vs2013 don't support union init
#ifdef _MSC_VER
static void init_server_trust_anchors()
{
	 SERVER_TAs[0].pkey.key.rsa.n = (unsigned char *)SERVER_TA0_RSA_N;
	 SERVER_TAs[0].pkey.key.rsa.nlen = sizeof SERVER_TA0_RSA_N;
	 SERVER_TAs[0].pkey.key.rsa.e = (unsigned char *)SERVER_TA0_RSA_E;
	 SERVER_TAs[0].pkey.key.rsa.elen = sizeof SERVER_TA0_RSA_E;
}
#endif

// ./brssl ta client.crt
static const unsigned char CLIENT_TA0_DN[] = {
	0x30, 0x81, 0x8E, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06,
	0x13, 0x02, 0x63, 0x6E, 0x31, 0x10, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x04,
	0x08, 0x0C, 0x07, 0x62, 0x65, 0x69, 0x6A, 0x69, 0x6E, 0x67, 0x31, 0x10,
	0x30, 0x0E, 0x06, 0x03, 0x55, 0x04, 0x07, 0x0C, 0x07, 0x68, 0x61, 0x69,
	0x64, 0x69, 0x61, 0x6E, 0x31, 0x0F, 0x30, 0x0D, 0x06, 0x03, 0x55, 0x04,
	0x0A, 0x0C, 0x06, 0x53, 0x70, 0x72, 0x69, 0x6E, 0x67, 0x31, 0x14, 0x30,
	0x12, 0x06, 0x03, 0x55, 0x04, 0x0B, 0x0C, 0x0B, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5F, 0x74, 0x65, 0x73, 0x74, 0x31, 0x0D, 0x30, 0x0B, 0x06,
	0x03, 0x55, 0x04, 0x03, 0x0C, 0x04, 0x58, 0x58, 0x58, 0x58, 0x31, 0x25,
	0x30, 0x23, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09,
	0x01, 0x16, 0x16, 0x53, 0x70, 0x72, 0x69, 0x6E, 0x67, 0x40, 0x63, 0x6C,
	0x69, 0x65, 0x6E, 0x74, 0x5F, 0x74, 0x65, 0x73, 0x74, 0x2E, 0x63, 0x6F,
	0x6D
};

static const unsigned char CLIENT_TA0_RSA_N[] = {
	0xA6, 0xC2, 0xBD, 0x58, 0xED, 0x1B, 0x3C, 0xA7, 0xE9, 0x78, 0x94, 0x71,
	0xB7, 0x93, 0x95, 0xEF, 0x4E, 0xFE, 0xBD, 0x4A, 0x56, 0xC2, 0x8B, 0xFD,
	0x39, 0xF5, 0x55, 0xCD, 0x45, 0xDB, 0x17, 0x22, 0x32, 0xC8, 0x21, 0x8D,
	0x8F, 0x06, 0xA5, 0xF1, 0xC5, 0x92, 0x40, 0x1D, 0xA0, 0xE0, 0xEC, 0xAC,
	0x0B, 0x24, 0xBD, 0x25, 0x3F, 0x9D, 0x34, 0xD4, 0xB8, 0x90, 0xA6, 0xC2,
	0xFD, 0x8D, 0xC1, 0xE2, 0xAA, 0xAD, 0xED, 0xDE, 0x6B, 0x7F, 0x0B, 0x8C,
	0x94, 0xC6, 0x05, 0x6C, 0xC2, 0x65, 0x6A, 0x5B, 0xF5, 0xDC, 0xD1, 0xE1,
	0xA4, 0x99, 0xB8, 0xB9, 0x2E, 0xA4, 0xC8, 0x6F, 0xF0, 0xD6, 0x3A, 0x95,
	0x23, 0xDA, 0x23, 0x10, 0x90, 0x2A, 0x05, 0x08, 0x0F, 0xFD, 0x66, 0xC2,
	0x1B, 0x3E, 0x89, 0xC3, 0xA8, 0x87, 0x8B, 0xDD, 0xC2, 0xD4, 0x2C, 0x1A,
	0x51, 0x50, 0x90, 0xCE, 0x0F, 0x8C, 0x70, 0xFA, 0xAC, 0x11, 0xD2, 0x8B,
	0x7F, 0x9A, 0xD9, 0x2A, 0xFE, 0xFC, 0x88, 0x43, 0x69, 0x87, 0x37, 0x9F,
	0xF7, 0x9F, 0xC1, 0xF0, 0xB9, 0x62, 0xC8, 0x9C, 0xD5, 0xCE, 0x1E, 0x08,
	0x49, 0x22, 0xDB, 0x6E, 0x88, 0xC4, 0x0B, 0xC1, 0x2C, 0x4E, 0x8A, 0x91,
	0xE7, 0x1B, 0x8A, 0x01, 0xE0, 0x8D, 0xBC, 0x3C, 0x79, 0x84, 0x43, 0xCF,
	0x3D, 0xEF, 0xA3, 0x1E, 0x92, 0xEC, 0x5B, 0x59, 0xD7, 0x47, 0xC3, 0xEC,
	0x26, 0x89, 0x79, 0xC0, 0x29, 0x34, 0x12, 0x32, 0x8A, 0xCA, 0xA1, 0xB4,
	0xEC, 0x6A, 0xCE, 0xF9, 0xDA, 0xA2, 0xFD, 0x1B, 0x55, 0xAA, 0x02, 0x7A,
	0x84, 0xEB, 0x73, 0x12, 0x43, 0x01, 0x32, 0xE4, 0xF1, 0x8B, 0xFE, 0x5E,
	0xCA, 0xE7, 0x0F, 0xA1, 0x5E, 0xE4, 0xEA, 0xC9, 0x81, 0x5E, 0x51, 0x2D,
	0x4E, 0xDB, 0x85, 0x89, 0x26, 0x70, 0x3D, 0xB8, 0xBE, 0xA1, 0xCC, 0xE0,
	0x7B, 0x94, 0x30, 0x01, 0x4D, 0x30, 0x51, 0x96, 0x48, 0x67, 0x79, 0xA2,
	0xAF, 0x00, 0x95, 0x5D, 0x17, 0xB4, 0x58, 0xD1, 0x51, 0xD0, 0x86, 0x7B,
	0x8E, 0xEB, 0x5A, 0x07, 0xAB, 0x9A, 0x28, 0xF6, 0x22, 0x15, 0x00, 0x12,
	0x6A, 0xD1, 0x48, 0xD0, 0x33, 0x0E, 0xD4, 0xCF, 0x57, 0x6B, 0xFA, 0x6F,
	0xC2, 0xC3, 0x04, 0x7B, 0xA6, 0xB6, 0x60, 0x49, 0xB9, 0xC0, 0xC3, 0xA7,
	0xA7, 0x67, 0x67, 0x0F, 0x15, 0x29, 0xFA, 0x0E, 0xC5, 0xE3, 0x2E, 0x45,
	0x26, 0x16, 0xDA, 0x14, 0x62, 0xED, 0x7C, 0x26, 0xB7, 0xE2, 0xFC, 0x71,
	0x98, 0xD5, 0xD0, 0xA5, 0xF6, 0x15, 0xCE, 0x62, 0xA3, 0x04, 0x87, 0xB9,
	0xE0, 0x80, 0x44, 0xD7, 0x23, 0xE8, 0xEC, 0xD8, 0x6B, 0x51, 0x10, 0xE3,
	0x4F, 0x85, 0x06, 0x18, 0x37, 0xD8, 0xB8, 0x50, 0x8D, 0x9A, 0x11, 0xF9,
	0x86, 0x11, 0x27, 0x64, 0xCF, 0xEA, 0x14, 0x0E, 0x8C, 0x52, 0xF9, 0x27
};

static const unsigned char CLIENT_TA0_RSA_E[] = {
	0x01, 0x00, 0x01
};

#ifndef _MSC_VER
static const br_x509_trust_anchor CLIENT_TAs[1] = {
#else
static br_x509_trust_anchor CLIENT_TAs[1] = {
#endif
	{
		{ (unsigned char *)CLIENT_TA0_DN, sizeof CLIENT_TA0_DN },
		0,
		{
			BR_KEYTYPE_RSA,
#ifndef _MSC_VER
			{ .rsa = {
				(unsigned char *)CLIENT_TA0_RSA_N, sizeof CLIENT_TA0_RSA_N,
				(unsigned char *)CLIENT_TA0_RSA_E, sizeof CLIENT_TA0_RSA_E,
			} }
#endif
		}
	}
};

#define CLIENT_TAs_NUM   1

// vs2013 don't support union init
#ifdef _MSC_VER
static void init_client_trust_anchors()
{
	 CLIENT_TAs[0].pkey.key.rsa.n = (unsigned char *)CLIENT_TA0_RSA_N;
	 CLIENT_TAs[0].pkey.key.rsa.nlen = sizeof CLIENT_TA0_RSA_N;
	 CLIENT_TAs[0].pkey.key.rsa.e = (unsigned char *)CLIENT_TA0_RSA_E;
	 CLIENT_TAs[0].pkey.key.rsa.elen = sizeof CLIENT_TA0_RSA_E;
}
#endif
